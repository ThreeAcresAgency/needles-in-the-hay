{% if product.metafields.custom.upsell_product %}
  {% assign upsell_product = product.metafields.custom.upsell_product.value %}
  
  <div class="upsell-inline" {{ block.shopify_attributes }}>
    <div class="upsell-container">
      <!-- Product details grid -->
      <div class="upsell-details-grid">
        <!-- Column 1: Title and Price -->
        <div class="upsell-info-column">
          <a href="{{ upsell_product.url }}" class="upsell-title">
            <h4>{{ upsell_product.title }}</h4>
          </a>
          <p class="upsell-price">{{ upsell_product.price | money }}</p>
        </div>
        <!-- Column 2: Variant Image -->
        <div class="upsell-variant-image-column">
          <div class="upsell-variant-image">
            {% if upsell_product.variants.first.image %}
              <img src="{{ upsell_product.variants.first.image | image_url: width: 600 }}" alt="{{ upsell_product.variants.first.title }}" loading="lazy">
            {% elsif upsell_product.featured_image %}
              <img src="{{ upsell_product.featured_image | image_url: width: 600 }}" alt="{{ upsell_product.title }}" loading="lazy">
            {% endif %}
          </div>
        </div>
        <!-- Column 3: Variant Dropdown and Add to Order Button (inline) -->
        <div class="upsell-actions-column">
          <div class="upsell-actions">
            {% assign has_variants = false %}
            {% for variant in upsell_product.variants %}
              {% unless variant.title == 'Default Title' %}
                {% assign has_variants = true %}
                {% break %}
              {% endunless %}
            {% endfor %}
            
            {% if has_variants %}
              <div class="upsell-variants">
                <select class="upsell-variant-select" id="upsell-variant-{{ upsell_product.id }}">
                                  {% for variant in upsell_product.variants %}
                  {% unless variant.title == 'Default Title' %}
                    <option value="{{ variant.id }}" data-image="{% if variant.image %}{{ variant.image | image_url: width: 600 }}{% else %}{{ upsell_product.featured_image | image_url: width: 600 }}{% endif %}" {% if forloop.first %}selected{% endif %}>
                      {{ variant.title }}
                    </option>
                  {% endunless %}
                {% endfor %}
                </select>
              </div>
            {% endif %}
            
            <button
              type="button"
              id="upsell-{{ upsell_product.id }}"
              class="button upsell-add-to-cart-button"
              data-product-id="{{ upsell_product.id }}"
            >
              <span class="add-to-cart-btn-content">
                <span class="svg-wrapper add-to-cart-icon">
                  {{- 'icon-add-to-cart.svg' | inline_asset_content -}}
                </span>
                <span class="add-to-cart-btn-text">Add to order</span>
              </span>
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const upsellButton = document.getElementById('upsell-{{ upsell_product.id }}');
      const variantSelect = document.getElementById('upsell-variant-{{ upsell_product.id }}');
      const variantImage = document.querySelector('.upsell-variant-image img');
      
      if (!upsellButton) return;
      
      let isInCart = false;
      
      // Helper to set button text/icon
      function setButtonState(state) {
        const icon = upsellButton.querySelector('.add-to-cart-icon');
        const text = upsellButton.querySelector('.add-to-cart-btn-text');
        if (state === 'added') {
          icon.innerHTML = `{{ 'icon-checkmark.svg' | inline_asset_content | replace: '\n', '' }}`;
          text.textContent = 'Added to cart';
        } else {
          icon.innerHTML = `{{ 'icon-add-to-cart.svg' | inline_asset_content | replace: '\n', '' }}`;
          text.textContent = 'Add to order';
        }
      }
      
      // Add to cart logic
      function addUpsellToCart() {
        const variantId = getSelectedVariantId();
        
        // Show loading state
        upsellButton.disabled = true;
        
        // Create form data like the main product form does
        const formData = new FormData();
        formData.append('id', variantId);
        formData.append('quantity', '1');
        
        // Get cart sections to update
        const cartItemsComponents = document.querySelectorAll('cart-items-component');
        let cartItemComponentsSectionIds = [];
        cartItemsComponents.forEach((item) => {
          if (item instanceof HTMLElement && item.dataset.sectionId) {
            cartItemComponentsSectionIds.push(item.dataset.sectionId);
          }
        });
        formData.append('sections', cartItemComponentsSectionIds.join(','));
        
        // Use the same fetch configuration as the main product form
        const fetchCfg = {
          method: 'POST',
          headers: {
            'X-Requested-With': 'XMLHttpRequest',
            'Accept': 'text/html'
          },
          body: formData
        };
        
        fetch(window.Shopify.routes.root + 'cart/add.js', fetchCfg)
        .then(response => response.json())
        .then(response => {
          console.log('Cart add response:', response);
          
          if (response.status) {
            // Error occurred
            console.error('Error adding upsell to cart:', response.message);
            
            // Error - show error state
            upsellButton.classList.add('atc-error');
            setTimeout(() => {
              upsellButton.classList.remove('atc-error');
            }, 2000);
            
            // Dispatch cart error event
            document.dispatchEvent(new CustomEvent('cart:error', {
              detail: {
                sourceId: 'upsell-{{ upsell_product.id }}',
                data: { message: response.message }
              }
            }));
          } else {
            // Success - dispatch cart add event like the main product form
            document.dispatchEvent(new CustomEvent('cart:update', {
              detail: {
                resource: {},
                sourceId: variantId.toString(),
                data: {
                  source: 'upsell-component',
                  itemCount: 1,
                  productId: '{{ upsell_product.id }}',
                  sections: response.sections
                }
              }
            }));
            
            // Show success feedback and animate button
            isInCart = true;
            setButtonState('added');
            setTimeout(() => {
              setButtonState('default');
              isInCart = false;
            }, 2000);
          }
        })
        .catch(error => {
          console.error('Error adding upsell to cart:', error);
          
          // Error - show error state
          upsellButton.classList.add('atc-error');
          setTimeout(() => {
            upsellButton.classList.remove('atc-error');
          }, 2000);
        })
        .finally(() => {
          // Reset loading state
          upsellButton.disabled = false;
        });
      }
      
      // Remove from cart logic (optional, if you want to support toggling)
      function removeUpsellFromCart(variantIdToRemove = null) {
        const variantId = variantIdToRemove || getSelectedVariantId();
        
        // Show loading state
        upsellButton.disabled = true;
        
        // Create form data like the main product form does
        const formData = new FormData();
        formData.append('id', variantId);
        formData.append('quantity', '0');
        
        // Get cart sections to update
        const cartItemsComponents = document.querySelectorAll('cart-items-component');
        let cartItemComponentsSectionIds = [];
        cartItemsComponents.forEach((item) => {
          if (item instanceof HTMLElement && item.dataset.sectionId) {
            cartItemComponentsSectionIds.push(item.dataset.sectionId);
          }
        });
        formData.append('sections', cartItemComponentsSectionIds.join(','));
        
        // Use the same fetch configuration as the main product form
        const fetchCfg = {
          method: 'POST',
          headers: {
            'X-Requested-With': 'XMLHttpRequest',
            'Accept': 'text/html'
          },
          body: formData
        };
        
        fetch(window.Shopify.routes.root + 'cart/change.js', fetchCfg)
        .then(response => response.json())
        .then(response => {
          console.log('Cart change response:', response);
          
          if (response.status) {
            // Error occurred
            console.error('Error removing upsell from cart:', response.message);
            
            // Error - show error state
            upsellButton.classList.add('atc-error');
            setTimeout(() => {
              upsellButton.classList.remove('atc-error');
            }, 2000);
            
            // Dispatch cart error event
            document.dispatchEvent(new CustomEvent('cart:error', {
              detail: {
                sourceId: 'upsell-{{ upsell_product.id }}',
                data: { message: response.message }
              }
            }));
          } else {
            // Success - dispatch cart update event like the main product form
            document.dispatchEvent(new CustomEvent('cart:update', {
              detail: {
                resource: {},
                sourceId: variantId.toString(),
                data: {
                  source: 'upsell-component',
                  itemCount: 0,
                  productId: '{{ upsell_product.id }}',
                  sections: response.sections
                }
              }
            }));
            
            // Show feedback and update button state
            isInCart = false;
            setButtonState('default');
          }
        })
        .catch(error => {
          console.error('Error removing upsell from cart:', error);
          
          // Error - show error state
          upsellButton.classList.add('atc-error');
          setTimeout(() => {
            upsellButton.classList.remove('atc-error');
          }, 2000);
        })
        .finally(() => {
          // Reset loading state
          upsellButton.disabled = false;
        });
      }
      
      // Get selected variant
      function getSelectedVariantId() {
        // Check if there's a variant select dropdown
        if (variantSelect) {
          return variantSelect.value;
        } else {
          // Single variant product - return the first variant ID
          return '{{ upsell_product.variants.first.id }}';
        }
      }
      
      // Button click
      upsellButton.addEventListener('click', function() {
        if (!isInCart) {
          addUpsellToCart();
        }
      });
      
      // Variant change
      if (variantSelect) {
        variantSelect.addEventListener('change', function() {
          // Update the variant image
          const selectedOption = this.options[this.selectedIndex];
          const imageUrl = selectedOption.getAttribute('data-image');
          if (variantImage) {
            if (imageUrl) {
              variantImage.src = imageUrl;
              variantImage.alt = selectedOption.textContent;
            } else {
              // Fallback to product featured image if variant has no image
              variantImage.src = '{{ upsell_product.featured_image | image_url: width: 600 }}';
              variantImage.alt = '{{ upsell_product.title }}';
            }
          }
        });
      }
    });
  </script>
{% endif %}

{% style %}
  .upsell-inline {
    margin-top: 2rem;
    padding: 1.5rem;
    border: 1px solid var(--color-border, #e0e0e0);
    border-radius: 8px;
    background: var(--color-background-secondary, #fafafa);
  }

  .upsell-container {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }



  .upsell-add-to-cart-button {
    min-width: 140px;
    position: relative;
    overflow: hidden;
    /* Use the same colors as the main product form's primary button */
    --button-color: var(--color-primary-button-text);
    --button-background-color: var(--color-primary-button-background);
    --button-border-color: var(--color-primary-button-border);
    --button-border-width: var(--style-border-width-primary);
  }

  .upsell-add-to-cart-button:hover {
    --button-color: var(--color-primary-button-hover-text);
    --button-background-color: var(--color-primary-button-hover-background);
    --button-border-color: var(--color-primary-button-hover-border);
  }

  .add-to-cart-btn-content {
    display: flex;
    align-items: center;
    gap: var(--gap-2xs);
    justify-content: center;
  }

  .add-to-cart-btn-text {
    transition: color 0.2s;
  }

  /* Error state - shake animation */
  .upsell-add-to-cart-button.atc-error {
    animation: shake 0.5s ease-in-out;
  }

  @keyframes shake {
    0%, 100% { transform: translateX(0); }
    25% { transform: translateX(-5px); }
    75% { transform: translateX(5px); }
  }

  .upsell-feedback {
    position: absolute;
    right: 0;
    top: 50%;
    transform: translateY(-50%);
    font-size: 0.875rem;
    font-weight: 500;
    padding: 0.25rem 0.75rem;
    border-radius: 4px;
    transition: all 0.3s ease;
    opacity: 0;
    pointer-events: none;
    white-space: nowrap;
  }

  .upsell-feedback--loading {
    opacity: 1;
    background: var(--color-background-secondary, #f5f5f5);
    color: var(--color-text-secondary, #666);
  }

  .upsell-feedback--success {
    opacity: 1;
    background: var(--color-success, #28a745);
    color: white;
  }

  .upsell-feedback--error {
    opacity: 1;
    background: var(--color-error, #dc3545);
    color: white;
  }

  .upsell-details-grid {
    display: grid;
    grid-template-columns: auto 48px 1fr;
    gap: 1.5rem;
    align-items: center;
  }

  /* Column 1: Title and Price */
  .upsell-info-column {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
    min-width: 0;
    max-width: 200px;
  }

  .upsell-title h4 {
    margin: 0;
    font-size: 1.1rem;
    font-weight: 600;
    color: var(--color-text, #333);
    text-decoration: none;
  }

  .upsell-title:hover h4 {
    color: var(--color-primary, #000);
  }

  .upsell-price {
    margin: 0;
    font-size: 1rem;
    font-weight: 500;
    color: var(--color-text-secondary, #666);
  }

  /* Column 3: Variant Image */
  .upsell-variant-image-column {
    display: flex;
    align-items: center;
    justify-content: center;
    height: var(--height-buy-buttons);
  }

  .upsell-variant-image {
    width: var(--height-buy-buttons);
    height: var(--height-buy-buttons);
    border-radius: 6px;
    overflow: hidden;
    border: 1px solid var(--color-border, #ddd);
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .upsell-variant-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    display: block;
  }

  /* Column 3: Actions (Variant Dropdown and Add to Order Button) */
  .upsell-actions-column {
    display: flex;
    align-items: center;
    height: var(--height-buy-buttons);
  }

  .upsell-actions {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    width: 100%;
    height: 100%;
  }

  .upsell-variants {
    display: flex;
    align-items: center;
    height: 100%;
    flex: 1;
  }

  .upsell-variant-select {
    width: 100%;
    height: var(--height-buy-buttons);
    padding: 0 1rem;
    font-size: 0.9rem;
    font-weight: 500;
    color: var(--color-text, #333);
    background: var(--color-background, #fff);
    border: 1px solid var(--color-border, #ddd);
    border-radius: 6px;
    cursor: pointer;
    transition: all 0.2s ease;
    appearance: none;
    background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='%236b7280' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='m6 8 4 4 4-4'/%3e%3c/svg%3e");
    background-position: right 0.75rem center;
    background-repeat: no-repeat;
    background-size: 1.5em 1.5em;
    padding-right: 2.5rem;
  }

  /* Mobile dropdown options styling */
  @media (max-width: 768px) {
    .upsell-variant-select option {
      font-size: 1rem !important;
      padding: 0.5rem !important;
    }
  }

  @media (max-width: 480px) {
    .upsell-variant-select option {
      font-size: 0.95rem !important;
      padding: 0.5rem !important;
    }
  }

  .upsell-variant-select:hover {
    border-color: var(--color-primary, #000);
  }

  .upsell-variant-select:focus {
    outline: 2px solid var(--color-primary, #000);
    outline-offset: 2px;
    border-color: var(--color-primary, #000);
  }



  .upsell-add-to-cart-button {
    min-width: 140px;
    height: var(--height-buy-buttons);
    position: relative;
    overflow: hidden;
    --button-color: var(--color-primary-button-text);
    --button-background-color: var(--color-primary-button-background);
    --button-border-color: var(--color-primary-button-border);
    --button-border-width: var(--style-border-width-primary);
  }

  .upsell-add-to-cart-button:hover {
    --button-color: var(--color-primary-button-hover-text);
    --button-background-color: var(--color-primary-button-hover-background);
    --button-border-color: var(--color-primary-button-hover-border);
  }

  .add-to-cart-btn-content {
    display: flex;
    align-items: center;
    gap: var(--gap-2xs);
    justify-content: center;
  }

  .add-to-cart-btn-text {
    transition: color 0.2s;
  }

  /* Mobile Responsive */
  @media (max-width: 768px) {
    .upsell-details-grid {
      grid-template-columns: 1fr 1fr !important;
      grid-template-rows: auto auto !important;
      gap: 1rem !important;
      text-align: center !important;
      align-items: stretch !important;
      min-height: 120px !important;
    }

    .upsell-info-column {
      align-items: center !important;
      max-width: none !important;
      justify-content: center !important;
      gap: 0.25rem !important;
      grid-column: 2 !important;
      grid-row: 1 !important;
      display: flex !important;
      flex-direction: column !important;
      height: 100% !important;
      min-height: 120px !important;
    }

    .upsell-title h4 {
      font-size: 1rem !important;
      line-height: 1.2 !important;
      text-align: center !important;
      margin: 0 !important;
    }

    .upsell-price {
      font-size: 0.9rem !important;
      text-align: center !important;
      margin: 0 !important;
    }

    .upsell-variant-image-column {
      justify-content: flex-start !important;
      height: auto !important;
      align-self: stretch !important;
      grid-column: 1 !important;
      grid-row: 1 !important;
      display: flex !important;
      align-items: flex-start !important;
      min-height: 120px !important;
    }

    .upsell-variant-image {
      width: 100% !important;
      max-width: none !important;
      height: auto !important;
      aspect-ratio: 1 !important;
      margin: 0 !important;
      padding: 0 !important;
    }

    .upsell-actions-column {
      grid-column: 1 / -1 !important;
      grid-row: 2 !important;
      margin-top: 1rem !important;
      height: auto !important;
    }

    .upsell-actions {
      flex-direction: column !important;
      gap: 0.75rem !important;
      width: 100% !important;
    }

    .upsell-variants {
      width: 100% !important;
    }

    .upsell-variant-select {
      width: 100% !important;
      min-height: 44px !important;
      font-size: 1rem !important;
    }

    .upsell-add-to-cart-button {
      width: 100% !important;
      min-height: 44px !important;
      font-size: 0.9rem !important;
    }
  }

  @media (max-width: 480px) {
    .upsell-inline {
      padding: 1rem;
    }

    .upsell-details-grid {
      grid-template-columns: 1fr 1fr !important;
      grid-template-rows: auto auto !important;
      gap: 0.75rem !important;
      align-items: stretch !important;
      min-height: 100px !important;
    }

    .upsell-info-column {
      gap: 0.2rem !important;
      grid-column: 2 !important;
      grid-row: 1 !important;
      display: flex !important;
      flex-direction: column !important;
      height: 100% !important;
      align-items: center !important;
      justify-content: center !important;
      min-height: 100px !important;
    }

    .upsell-title h4 {
      font-size: 0.95rem !important;
      margin: 0 !important;
    }

    .upsell-price {
      font-size: 0.85rem !important;
      margin: 0 !important;
    }

    .upsell-variant-image-column {
      grid-column: 1 !important;
      grid-row: 1 !important;
      display: flex !important;
      align-items: flex-start !important;
      min-height: 100px !important;
    }

    .upsell-variant-image {
      width: 100% !important;
      max-width: none !important;
      height: auto !important;
      aspect-ratio: 1 !important;
      margin: 0 !important;
      padding: 0 !important;
    }

    .upsell-actions-column {
      grid-column: 1 / -1 !important;
      grid-row: 2 !important;
      margin-top: 0.75rem !important;
      height: auto !important;
    }

    .upsell-actions {
      gap: 0.5rem !important;
    }

    .upsell-variant-select {
      font-size: 0.95rem !important;
      padding: 0 0.75rem !important;
      padding-right: 2rem !important;
      min-height: 40px !important;
    }

    .upsell-add-to-cart-button {
      font-size: 0.85rem !important;
      min-height: 40px !important;
    }
  }
{% endstyle %}

{% schema %}
{
  "name": "Add to Order",
  "tag": null,
  "settings": [
    {
      "type": "paragraph",
      "content": "This block displays an additional product that customers can add to their order. The product is pulled from the 'custom.upsell_product' metafield and will be added to cart immediately when the checkbox is checked."
    }
  ],
  "presets": [
    {
      "name": "Add to Order"
    }
  ]
}
{% endschema %}
  